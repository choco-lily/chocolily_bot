<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= typeof title !== 'undefined' ? title : '디스코드 봇 대시보드' %></title>
  <!-- Pretendard 폰트 추가 -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pretendard/1.3.9/static/pretendard.min.css">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <!-- 커스텀 스타일 -->
  <style>
    :root {
      --discord-primary: #5865F2;
      --discord-dark: #36393f;
      --discord-darker: #2f3136;
      --discord-darkest: #202225;
      --discord-light: #b9bbbe;
      --discord-lighter: #d9d9d9;
    }
    
    body {
      background-color: var(--discord-darker);
      color: #fff;
      font-family: 'Pretendard', 'Noto Sans KR', 'Helvetica Neue', Arial, sans-serif;
    }
    
    .navbar {
      background-color: var(--discord-darkest);
      color: #fff;
    }
    
    .btn-discord {
      background-color: var(--discord-primary);
      color: white;
    }
    
    .btn-discord:hover {
      background-color: #4752c4;
      color: white;
    }
    
    .card {
      background-color: var(--discord-dark);
      border: none;
      border-radius: 8px;
      margin-bottom: 20px;
      color: #fff;
    }
    
    .server-card {
      transition: transform 0.2s;
    }
    
    .server-card:hover {
      transform: translateY(-5px);
    }
    
    .server-icon {
      width: 64px;
      height: 64px;
      border-radius: 50%;
      background-color: var(--discord-primary);
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      color: white;
      margin: 0 auto 15px;
    }
    
    .server-name {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .form-switch .form-check-input:checked {
      background-color: var(--discord-primary);
      border-color: var(--discord-primary);
    }
    
    .footer {
      background-color: var(--discord-darkest);
      color: #fff;
      padding: 20px 0;
      margin-top: 40px;
    }
    
    .form-check-label, .form-check-input {
      color: #fff;
    }
    
    /* 텍스트 색상 강제 흰색 */
    .text-muted,
    .text-secondary,
    .text-info,
    .text-dark,
    .text-light,
    .text-body,
    .text-black,
    .text-gray,
    .text-white,
    .form-text,
    .form-label,
    .form-check-label,
    .form-check-input,
    label,
    th,
    td,
    p,
    span,
    small,
    div,
    h1, h2, h3, h4, h5, h6 {
      color: #fff !important;
    }
    
    .alert {
      background-color: var(--discord-dark);
      color: var(--discord-lighter) !important;
    }
  </style>
</head>
<body>
  <!-- 네비게이션 바 -->
  <nav class="navbar navbar-expand-md navbar-dark mb-4">
    <div class="container">
      <a class="navbar-brand" href="/">쵸코릴리봇</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarCollapse">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" id="navbarCollapse">
        <ul class="navbar-nav me-auto mb-2 mb-md-0">
          <li class="nav-item">
            <a class="nav-link" href="/">홈</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" href="/dashboard/rankings/가위바위보">가위바위보 랭킹</a>
          </li>
          <% if (user) { %>
            <li class="nav-item">
              <a class="nav-link" href="/dashboard">대시보드</a>
            </li>
          <% } %>
        </ul>
        <div class="d-flex">
          <% if (user) { %>
            <div class="dropdown">
              <button class="btn btn-dark dropdown-toggle" type="button" data-bs-toggle="dropdown">
                <img src="https://cdn.discordapp.com/avatars/<%= user.id %>/<%= user.avatar %>.png" alt="Avatar" width="24" height="24" class="rounded-circle me-2">
                <%= user.username %>
              </button>
              <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark">
                <li><a class="dropdown-item" href="/dashboard">대시보드</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="/auth/logout">로그아웃</a></li>
              </ul>
            </div>
          <% } else { %>
            <a href="/auth/discord" class="btn btn-discord">
              <i class="fab fa-discord me-2"></i> 디스코드로 로그인
            </a>
          <% } %>
        </div>
      </div>
    </div>
  </nav>

  <!-- 메인 콘텐츠 -->
  <main class="container">
    <%- body %>
  </main>

  <!-- 푸터 -->
  <footer class="footer text-center mt-5">
    <div class="container">
      <p class="mb-0">&copy; 2025 쵸코릴리봇 | <a href="https://github.com/yourusername/discord_bot_with_ai" target="_blank">GitHub</a></p>
    </div>
  </footer>

  <!-- Bootstrap Bundle with Popper -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  
  <% if (typeof guild !== 'undefined' && guild) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // 서버에서 전달받은 데이터를 전역 변수로 설정
      window.GUILD_ID = document.querySelector('[data-guild-id]').dataset.guildId;
      window.INITIAL_COMMAND_STATES = new Map();
      
      // 모든 토글 스위치의 초기 상태를 저장
      document.querySelectorAll('.command-toggle').forEach(toggle => {
        const commandName = toggle.dataset.command;
        window.INITIAL_COMMAND_STATES.set(commandName, toggle.checked);
      });

      let hasChanges = false;
      const saveButton = document.getElementById('saveCommands');
      const toggleSwitches = document.querySelectorAll('.command-toggle');
      
      // 변경사항 감지
      toggleSwitches.forEach(toggle => {
        toggle.addEventListener('change', function() {
          const commandName = this.dataset.command;
          const newState = this.checked;
          const label = document.querySelector(`label[for="command-${commandName}"]`);
          
          // 즉시 텍스트 변경
          label.textContent = newState ? '활성화됨' : '비활성화됨';
          
          // 모든 토글의 현재 상태와 초기 상태를 비교
          hasChanges = false;
          for (const t of toggleSwitches) {
            if (t.checked !== window.INITIAL_COMMAND_STATES.get(t.dataset.command)) {
              hasChanges = true;
              break;
            }
          }
          
          saveButton.disabled = !hasChanges;
          saveButton.className = hasChanges ? 'btn btn-danger w-100' : 'btn btn-secondary w-100';
        });
      });

      // 저장하기 버튼 클릭 이벤트
      saveButton.addEventListener('click', async function() {
        if (!hasChanges) return;
        
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> 저장 중...';
        
        try {
          const enabledCommands = Array.from(toggleSwitches)
            .filter(toggle => toggle.checked)
            .map(toggle => toggle.dataset.command);
          
          const response = await fetch(`/dashboard/server/${window.GUILD_ID}/sync-commands`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ enabledCommands })
          });

          if (response.ok) {
            // 초기 상태 업데이트
            toggleSwitches.forEach(toggle => {
              window.INITIAL_COMMAND_STATES.set(toggle.dataset.command, toggle.checked);
            });
            hasChanges = false;
            this.className = 'btn btn-secondary w-100';
            this.innerHTML = '<i class="fas fa-save me-2"></i> 저장하기';
            alert('명령어 설정이 저장되었습니다.');
          } else {
            throw new Error('저장 실패');
          }
        } catch (error) {
          console.error('명령어 저장 중 오류:', error);
          alert('명령어 저장 중 오류가 발생했습니다.');
          this.innerHTML = '<i class="fas fa-save me-2"></i> 저장하기';
        }
        
        this.disabled = false;
      });

      // 동기화 버튼 스크립트
      let lastSyncTime = 0;
      const syncBtn = document.getElementById('syncCommands');
      const cooldownMsg = document.getElementById('syncCooldownMsg');
      const guildIdElem = document.querySelector('[data-guild-id]');
      if (syncBtn && cooldownMsg && guildIdElem) {
        const guildId = guildIdElem.getAttribute('data-guild-id');
        syncBtn.addEventListener('click', async function() {
          const now = Date.now();
          if (now - lastSyncTime < 60000) {
            cooldownMsg.style.display = '';
            setTimeout(() => { cooldownMsg.style.display = 'none'; }, 2000);
            return;
          }
          syncBtn.disabled = true;
          syncBtn.innerHTML = '<i class="fas fa-sync-alt fa-spin me-2"></i> 동기화 중...';
          cooldownMsg.style.display = 'none';
          try {
            const res = await fetch(`/dashboard/server/${guildId}/sync-commands`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ enabledCommands: Array.from(document.querySelectorAll('.command-toggle')).filter(t => t.checked).map(t => t.dataset.command) }) });
            if (res.ok) {
              lastSyncTime = Date.now();
              syncBtn.innerHTML = '<i class="fas fa-sync-alt me-2"></i> 동기화 완료';
              setTimeout(() => { syncBtn.innerHTML = '<i class="fas fa-sync-alt me-2"></i> 동기화'; syncBtn.disabled = false; }, 2000);
            } else {
              throw new Error('동기화 실패');
            }
          } catch (e) {
            syncBtn.innerHTML = '<i class="fas fa-sync-alt me-2"></i> 동기화';
            syncBtn.disabled = false;
            alert('동기화 중 오류가 발생했습니다.');
          }
        });
      }
    });
  </script>
  <% } %>
</body>
</html> 